package be.rlab.afip.support

import be.rlab.afip.support.store.FileSystemObjectStore
import org.bouncycastle.pkcs.PKCS10CertificationRequest
import org.junit.jupiter.api.BeforeEach
import org.junit.jupiter.api.Disabled
import org.junit.jupiter.api.Test
import java.io.File
import java.security.KeyPair
import java.security.KeyStore
import java.security.PrivateKey
import java.security.PublicKey
import java.security.cert.X509Certificate

/** This test shows how to create the required security objects to authenticate
 * your application against the AFIP web services.
 *
 * These are the steps to register a certificate:
 *
 * 1. Create an RSA key pair
 * 2. Create a Certificate Request (CSR)
 * 3. Issue the certificate in the AFIP systems (look at the README file)
 * 4. Add the certificate to the Certificate Manager
 */
@Disabled
class CertificateManagerTest {
    companion object {
        /** The secrets generated by this test will be stored in this directory.
         * Change the directory to store the secrets in another directory.
         */
        private val storeDir: File = File("/home/matt/data/afip/certs/pont/keystore-prod")

        /** Name of the company for which AFIP will issue the certificate.
         * Change it to your company name.
         */
        private const val COMPANY_NAME: String = "Pont"

        /** Name of the application for which AFIP will issue the certificate.
         * Change it to your application name.
         */
        private const val APPLICATION_NAME: String = "PontDEV"

        /** CUIT of the person or company that will use the AFIP web services.
         * Change it to your CUIT.
         */
        private const val CUIT: Long = 20334177603

        /** Absolute path to the certificate file.
         * When you get the certificate from the AFIP, store the content in a file at this location.
         */
        private const val CERT_FILE: String = "/home/matt/data/afip/certs/pont/cert_prod.pem"

        /** Alias to retrieve the certificate and the private key from the [KeyStore].
         */
        private const val ALIAS: String = "afip_security_objects"

        /** [KeyStore] password.
         */
        private const val PASSWORD: String = "TestPwd"

        /** Name of the [KeyStore] in the [CertificateManager].
         */
        private const val KEY_STORE_NAME: String = "afip.keyStore"
    }

    private lateinit var manager: CertificateManager

    @BeforeEach
    fun setUp() {
        storeDir.mkdirs()
        manager = CertificateManager(FileSystemObjectStore(storeDir))
    }

    /** Use this test to create the RSA key pair and the Certificate Request (CSR)
     * required to issue the certificates in the AFIP systems.
     *
     * For security reasons it's recommended to have a set of key pair/CSR for each environment.
     */
    @Test
    fun createKeysAndCsr() {
        val keyPair = manager.createKeyPair()
        val csr: PKCS10CertificationRequest = manager.createCertRequest(keyPair, COMPANY_NAME, APPLICATION_NAME, CUIT)

        manager.save("afip.privateKey", keyPair.private)
        manager.save("afip.publicKey", keyPair.public)
        manager.save("afip.csr", csr)

        // Just testing load methods
        manager.load<PrivateKey>("afip.privateKey")
        manager.load<PublicKey>("afip.publicKey")
        manager.load<PKCS10CertificationRequest>("afip.csr")

        println("RSA key pairs and certificate request (CSR) successfully created and saved to internal storage")
    }

    /** Use this test to create the RSA key pair and the Certificate Request (CSR)
     * required to issue the certificates in the AFIP systems.
     *
     * For security reasons it's recommended to have a set of key pair/CSR for each environment.
     */
    @Test
    fun loadAndSaveCertificate() {
        val certFile = File(CERT_FILE)
        val cert: X509Certificate = manager.load(certFile.inputStream())
        val privateKey: PrivateKey = manager.load("afip.privateKey")
        val publicKey: PublicKey = manager.load("afip.publicKey")
        val keyPair = KeyPair(publicKey, privateKey)

        manager.saveKeyStore(KEY_STORE_NAME, ALIAS, PASSWORD, keyPair, cert)
        manager.loadKeyStore(KEY_STORE_NAME, PASSWORD)

        println(
            "RSA key pairs and certificate successfully added to the protected KeyStore and saved to internal storage"
        )
    }
}
